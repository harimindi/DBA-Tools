USE [msdb]
GO

/****** Object:  Job [Maintenance - Cinderella Process]    Script Date: 26/02/2018 12:52:35 ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [Database Maintenance]    Script Date: 26/02/2018 12:52:35 ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'Database Maintenance' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'Database Maintenance'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'Maintenance - Cinderella Process', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=2, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'Runs at midnight to remove enhanced privileges from users.

Uses an exclusion table in the DBA database to ignore system or service accounts, plus any other accounts or groups where the enhanced privileges need to be retained.
This table includes an expiry column that allows for the exclusion to be time limited. e.g. granting enhanced privileges to fault investigators or change deployers who need to retain their privileges for several days.
If the expiry column is NULL (as for service accounts) then the', 
		@category_name=N'Database Maintenance', 
		@owner_login_name=N'sa', 
		@notify_email_operator_name=N'DBA Alerts', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Run SQL]    Script Date: 26/02/2018 12:52:35 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Run SQL', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
-----------------------------------------------------------------------------------------------------------------
-- Cinderella
--
-- G. Harris, January 2015
--
-- Automated temporary permissions management

-- Version History
-- ====
-- v 1.4. - exclude snapshots (DB names like %_Snap) and emergency sysadmin account (login like SQLAdmin_%)
-- v 1.3. - exclude read only databases
-- v 1.2. - exclude db names with spaces or dashes - thank you TFS and Sharepoint
-- v 1.1. - exclude ''public'',''dbo'',''guest'',''INFORMATION_SCHEMA'',''sys''

use master
go

SET  NOCOUNT ON;
go

-- Remove sysadmins
-- Note: we now exclude the emergency ''sa'' accounts so that if Cinderella deletes *all* user permissions, then we still have a route in
--
declare curs_SAmembers CURSOR FOR
SELECT p.name
 FROM  sys.server_principals p
 JOIN  sys.syslogins s ON p.sid = s.sid
 WHERE p.type_desc IN (''SQL_LOGIN'', ''WINDOWS_LOGIN'', ''WINDOWS_GROUP'')
   -- Logins that are not process logins
   AND p.name NOT LIKE ''##%''
   -- Logins that are sysadmins
   AND s.sysadmin = 1
   AND p.name NOT LIKE ''SQLAdmin_%'' -- Exclude emergency sysadmin accounts
   AND upper(p.name) not in (select UPPER(name) from DBA.dbo.Cinderella_Exclusion where UPPER(privilege) = ''SYSADMIN'' 
						and (enddate is null or enddate < cast(getdate() as date) )
					 )

OPEN curs_SAmembers;

declare @SAname sysname;
declare @SQLcmd nvarchar(1000);

FETCH NEXT FROM curs_SAmembers INTO @SAname;
WHILE (@@FETCH_STATUS = 0)
BEGIN
-- 2012 --   PRINT N''ALTER SERVER ROLE sysadmin DROP MEMBER ['' + @SAname + ''] ;'';
-- 2008R2 -- SELECT ''EXEC sp_dropsrvrolemember '''''' + p.name + '''''' , ''''sysadmin'''' ;''

-- print rollback for log
--  PRINT N''EXEC sp_dropsrvrolemember '''''' + @SAname + '''''' , ''''sysadmin'''' ;'';
  PRINT N''EXEC sp_addsrvrolemember '''''' + @SAname + '''''' , ''''sysadmin'''' ;'';

-- 2012
--  SET @SQLcmd = N''USE MASTER'' + CHAR(13) + N''ALTER SERVER ROLE sysadmin DROP MEMBER ['' + @SAname + ''] ;'';

-- 2008R2
  SET @SQLcmd = N''USE MASTER'' + CHAR(13) + N''EXEC sp_dropsrvrolemember '''''' + @SAname + '''''' , ''''sysadmin'''' ;'';

  EXEC sp_executesql @SQLcmd;
  PRINT @SQLcmd;
  PRINT CHAR(13) + CHAR(13);
  FETCH NEXT FROM curs_SAmembers INTO @SAname;
END

CLOSE curs_SAmembers;
DEALLOCATE curs_SAmembers;
GO

------
-- Now for database level permissions
-- Use EXCEPT clause to exclude entries in Cinderella_Exclusion table

declare curs_dbname CURSOR FOR
SELECT name
 FROM  master.sys.databases
 WHERE state = 0 -- ONLINE
   AND name NOT LIKE ''%_Snap''
   AND name not like ''%-%'' -- sharepoint, grrr
   AND name not like ''% %'' -- TFS, grrr
   AND is_read_only = 0

OPEN curs_dbname;

declare @dbname sysname;
declare @SQLcmd nvarchar(4000);

FETCH NEXT FROM curs_dbname INTO @dbname;
WHILE (@@FETCH_STATUS = 0)
BEGIN
--PRINT @dbname + char(13) + char(13)
SET @SQLcmd = 
''use ''+@dbname+''; 
declare curs_dropmember CURSOR FOR
  select ''''use '''' + db_name() + ''''; exec sp_droprolemember '''''''''''' + roleprinc.[name] + '''''''''''','''''''''''' + memberprinc.[name] + '''''''''''' ;''''
    FROM    
    --Role/member associations
      sys.database_role_members members
    JOIN
    --Roles
      sys.database_principals roleprinc ON roleprinc.[principal_id] = members.[role_principal_id]
	    AND roleprinc.[name] in (''''db_executor'''',''''db_owner'''',''''db_ddladmin'''',''''db_datawriter'''',''''db_securityadmin'''',''''db_accessadmin'''',''''db_backupoperator'''',''''db_datareader'''')
    JOIN
    --Role members (database users)
      sys.database_principals memberprinc ON memberprinc.[principal_id] = members.[member_principal_id] 
	      AND memberprinc.[name] not in (''''public'''',''''dbo'''',''''guest'''',''''INFORMATION_SCHEMA'''',''''sys'''')
  EXCEPT
    select ''''use '''' + db_name() + ''''; exec sp_droprolemember '''''''''''' + roleprinc.[name] + '''''''''''','''''''''''' + memberprinc.[name] + '''''''''''' ;''''
    FROM    
    --Role/member associations
      sys.database_role_members members
    JOIN
    --Roles
      sys.database_principals roleprinc ON roleprinc.[principal_id] = members.[role_principal_id]
	    AND roleprinc.[name] in (''''db_executor'''',''''db_owner'''',''''db_ddladmin'''',''''db_datawriter'''',''''db_securityadmin'''',''''db_accessadmin'''',''''db_backupoperator'''',''''db_datareader'''')
    JOIN
    --Role members (database users)
      sys.database_principals memberprinc ON memberprinc.[principal_id] = members.[member_principal_id]
    JOIN DBA.dbo.Cinderella_Exclusion excl ON memberprinc.[name] = excl.name COLLATE Latin1_General_CI_AS
	  AND roleprinc.[name] = excl.privilege COLLATE Latin1_General_CI_AS
	  AND excl.dbname = db_name() COLLATE Latin1_General_CI_AS
	  and (excl.enddate is null or excl.enddate >= cast(getdate() as date) )

OPEN curs_dropmember;

declare @dbname sysname;
declare @newSQLcmd nvarchar(4000);

FETCH NEXT FROM curs_dropmember INTO @newSQLcmd;
WHILE (@@FETCH_STATUS = 0)
BEGIN

  EXEC sp_executesql @newSQLcmd;
  PRINT @newSQLcmd;
--  PRINT CHAR(13) + CHAR(13);
  FETCH NEXT FROM curs_dropmember INTO @newSQLcmd;
END

CLOSE curs_dropmember;
DEALLOCATE curs_dropmember;

'' + char(13)
--PRINT @SQLcmd

EXEC sp_executesql @SQLcmd;

  FETCH NEXT FROM curs_dbname INTO @dbname;
END

CLOSE curs_dbname;
DEALLOCATE curs_dbname;
GO

SET NOCOUNT OFF;
GO
', 
		@database_name=N'master', 
		@output_file_name=N'X:\SQL Job Logs\Cinderella_Process_$(ESCAPE_SQUOTE(STRTDT))_$(ESCAPE_SQUOTE(STRTTM)).txt', 
		@flags=2
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'Cinders Midnite', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=1, 
		@freq_subday_interval=0, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20150112, 
		@active_end_date=99991231, 
		@active_start_time=1, 
		@active_end_time=235959, 
		@schedule_uid=N'456fa0ba-d5bf-45fa-bdda-d3f965d78964'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:
GO


